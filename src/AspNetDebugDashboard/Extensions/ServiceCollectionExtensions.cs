using AspNetDebugDashboard.Core.Models;\nusing AspNetDebugDashboard.Core.Services;\nusing AspNetDebugDashboard.Storage;\nusing AspNetDebugDashboard.Interceptors;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.DependencyInjection.Extensions;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.AspNetCore.Http;\n\nnamespace AspNetDebugDashboard.Extensions;\n\npublic static class ServiceCollectionExtensions\n{\n    public static IServiceCollection AddDebugDashboard(this IServiceCollection services, Action<DebugConfiguration>? configure = null)\n    {\n        var config = new DebugConfiguration();\n        configure?.Invoke(config);\n        \n        services.Configure<DebugConfiguration>(options =>\n        {\n            options.IsEnabled = config.IsEnabled;\n            options.DatabasePath = config.DatabasePath;\n            options.BasePath = config.BasePath;\n            options.MaxEntries = config.MaxEntries;\n            options.LogRequestBodies = config.LogRequestBodies;\n            options.LogResponseBodies = config.LogResponseBodies;\n            options.LogSqlQueries = config.LogSqlQueries;\n            options.LogExceptions = config.LogExceptions;\n            options.EnableRealTimeUpdates = config.EnableRealTimeUpdates;\n            options.ExcludedPaths = config.ExcludedPaths;\n            options.ExcludedHeaders = config.ExcludedHeaders;\n            options.MaxBodySize = config.MaxBodySize;\n            options.RetentionPeriod = config.RetentionPeriod;\n            options.EnablePerformanceCounters = config.EnablePerformanceCounters;\n            options.EnableDetailedSqlLogging = config.EnableDetailedSqlLogging;\n            options.AllowDataExport = config.AllowDataExport;\n            options.AllowDataImport = config.AllowDataImport;\n            options.SlowQueryThresholdMs = config.SlowQueryThresholdMs;\n            options.SlowRequestThresholdMs = config.SlowRequestThresholdMs;\n            options.TimeZone = config.TimeZone;\n            options.EnableStackTraceCapture = config.EnableStackTraceCapture;\n            options.MaxStackTraceDepth = config.MaxStackTraceDepth;\n            options.EnableMemoryProfiling = config.EnableMemoryProfiling;\n            options.EnableCpuProfiling = config.EnableCpuProfiling;\n        });\n        \n        // Register core services\n        services.TryAddSingleton<IHttpContextAccessor, HttpContextAccessor>();\n        services.AddSingleton<DebugContext>();\n        services.AddScoped<IDebugLogger, DebugLogger>();\n        services.AddScoped<IDebugDashboardService, DebugDashboardService>();\n        \n        // Register storage\n        services.AddLiteDbStorage(config);\n        \n        // Register EF Core interceptor\n        services.AddSingleton<DebugCommandInterceptor>();\n        \n        // Add MVC services for the dashboard\n        services.AddControllersWithViews()\n            .AddApplicationPart(typeof(ServiceCollectionExtensions).Assembly);\n        \n        return services;\n    }\n    \n    public static IServiceCollection AddDebugDashboardEntityFramework(this IServiceCollection services)\n    {\n        services.AddScoped<DebugCommandInterceptor>();\n        return services;\n    }\n}\n