name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_NOLOGO: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        framework: ['net7.0', 'net8.0']

    steps:
    - uses: actions/checkout@v4
    
    # Install all required .NET SDKs (order doesn't matter - highest will be used)
    - name: Setup .NET 7.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '7.0.x'
        
    - name: Setup .NET 8.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    # Clean all obj/bin folders to avoid corrupted project.assets.json
    - name: Clean solution
      run: dotnet clean
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    # Force fresh restore with all dependencies
    - name: Restore dependencies
      run: dotnet restore --force --no-cache
    
    - name: Build for ${{ matrix.framework }}
      run: dotnet build --no-restore --configuration Release --framework ${{ matrix.framework }}
    
    - name: Test for ${{ matrix.framework }}
      run: dotnet test --no-build --configuration Release --framework ${{ matrix.framework }} --verbosity normal --collect:"XPlat Code Coverage"

  package:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    # Install all required .NET SDKs
    - name: Setup .NET 7.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '7.0.x'
        
    - name: Setup .NET 8.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Clean solution
      run: dotnet clean
    
    - name: Restore dependencies
      run: dotnet restore --force --no-cache
    
    - name: Build
      run: dotnet build --no-restore --configuration Release
    
    - name: Pack
      run: dotnet pack src/AspNetDebugDashboard/AspNetDebugDashboard.csproj --configuration Release --no-build --output ./artifacts
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package
        path: ./artifacts/*.nupkg

  sample-app-test:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    # Install all required .NET SDKs
    - name: Setup .NET 7.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '7.0.x'
        
    - name: Setup .NET 8.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Clean solution
      run: dotnet clean
    
    - name: Restore dependencies
      run: dotnet restore --force --no-cache
    
    - name: Build sample app
      run: dotnet build samples/SampleApp/SampleApp.csproj --configuration Release
    
    - name: Test package creation
      run: |
        echo "Testing package creation..."
        dotnet pack src/AspNetDebugDashboard/AspNetDebugDashboard.csproj --configuration Release --output ./test-packages
        ls -la ./test-packages/
        echo "âœ… Package created successfully"
